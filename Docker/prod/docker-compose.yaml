version: "3.4"

services:
  db:
    image: postgres:12.1-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    restart: always
  rabbitmq:
    image: rabbitmq:3.8.3
    env_file:
      - .env.secret
    restart: always
  django:
    build:
      context: ../../
      dockerfile: ./Docker/prod/python/Dockerfile
      target: django
    command: gunicorn project.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - ../../django/:/usr/src/app/
    ports:
      - 9031:8000
    env_file:
      - .env
      - .env.secret
    depends_on:
      - db
    restart: always
  celery:
    build:
      context: ../../
      dockerfile: ./Docker/prod/python/Dockerfile
      target: celery
    command: celery -A project worker -l info --concurrency=1
    volumes:
      - ../../django:/usr/src/app/
    env_file:
      - .env
      - .env.secret
    depends_on:
      - db
      - rabbitmq
    restart: always
  telegram:
    build:
      context: ../../
      dockerfile: ./Docker/dev/python/Dockerfile
      target: telegram
    command: python /usr/src/app/telegram-bot/bot.py
    volumes:
      - ../../django:/usr/src/app/
    env_file:
      - .env
      - .env.secret
    depends_on:
      - django
      - celery
    restart: always
  vuejs:
    build:
      context: ../../
      dockerfile: ./Docker/prod/vuejs/Dockerfile
    volumes:
      - ../../vuejs/:/usr/src/app/
      - /usr/src/app/node_modules
    ports:
      - 8080:8080
    env_file:
      - .env
      - .env.secret
    stdin_open: true
    tty: true

volumes:
  postgres_data:
